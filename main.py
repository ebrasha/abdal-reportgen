# ----------------------------------------------------------
# Programmer       : Ebrahim Shafiei (EbraSha)
# Email            : Prof.Shafiei@Gmail.com
# Product Name     : Abdal ReportGen
# ----------------------------------------------------------

import argparse
import os
import pandas as pd
from jinja2 import Environment, FileSystemLoader
import time
from pathlib import Path
import sys
import shlex
import sqlite3

# ----------------------------------------------------------
# Create output directory
# ----------------------------------------------------------
def make_output_dir(file_path):
    base_name = Path(file_path).stem
    unix_time = int(time.time())
    report_dir = Path(file_path).parent / f"{base_name}_AbdalReport_{unix_time}"
    os.makedirs(report_dir / "templates", exist_ok=True)
    return report_dir

# ----------------------------------------------------------
# HTML Template
# ----------------------------------------------------------
def setup_template(report_dir):
    html_template = """
<!DOCTYPE html>
<html lang=\"en\">
<head>
    <meta charset=\"UTF-8\">
    <title>{{ title }}</title>
    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">
    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">
    <script src=\"https://unpkg.com/darkmode-js/lib/darkmode-js.min.js\"></script>
    <style>
        body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
        footer { margin-top: 40px; }
        body.darkmode--activated .card {
            background-color: #1e1e1e !important;
            color: #e4e4e4 !important;
            border-color: #444 !important;
        }
        body.darkmode--activated .card-header {
            background-color: #333 !important;
            color: #fff !important;
        }
        body.darkmode--activated table.table {
            background-color: #1e1e1e !important;
            color: #ccc !important;
        }
        body.darkmode--activated table.table th, 
        body.darkmode--activated table.table td {
            border-color: #444 !important;
            background-color: #1e1e1e !important;
            color: #ccc !important;
        }
        body.darkmode--activated .table-hover tbody tr:hover {
            background-color: #2b2b2b !important;
        }
        body.darkmode--activated footer { color: #aaa !important; }
    </style>
</head>
<body class=\"bg-light\">
<div class=\"container py-5\">
    <div class=\"text-center mb-4\">
        <h1 class=\"display-5 text-primary\">Abdal ReportGen</h1>
        <p class=\"lead\">Report generated by Ebrahim Shafiei (EbraSha) - Prof.Shafiei@Gmail.com</p>
        <p class=\"text-muted\">This report was automatically generated using Abdal ReportGen</p>
    </div>

    <div class=\"card shadow-sm mb-4\">
        <div class=\"card-header bg-dark text-white\">
            <h5 class=\"mb-0\">ðŸ“Š Data Table</h5>
        </div>
        <div class=\"card-body\">
            <div class=\"table-responsive\">{{ table | safe }}</div>
        </div>
    </div>
</div>

<footer class=\"text-center py-4 text-muted\">Abdal ReportGen | Developed by Ebrahim Shafiei (EbraSha)</footer>

<script>
new Darkmode({ bottom: '32px', right: '32px', label: 'ðŸŒ“', autoMatchOsTheme: true }).showWidget();
</script>
</body>
</html>
"""
    with open(report_dir / "templates" / "report.html", "w", encoding='utf-8') as f:
        f.write(html_template.strip())

# ----------------------------------------------------------
# Load data
# ----------------------------------------------------------
def load_data(file_path):
    suffix = Path(file_path).suffix.lower()
    if suffix == '.csv':
        return pd.read_csv(file_path)
    elif suffix == '.json':
        return pd.read_json(file_path)
    elif suffix == '.xml':
        return pd.read_xml(file_path)
    elif suffix in ['.xls', '.xlsx']:
        return pd.read_excel(file_path)
    elif suffix == '.sql':
        with sqlite3.connect(file_path) as conn:
            return pd.read_sql_query("SELECT * FROM data", conn)
    else:
        raise ValueError("Unsupported file format.")

# ----------------------------------------------------------
# Generate report
# ----------------------------------------------------------
def generate_report(file_path):
    try:
        df = load_data(file_path)
    except Exception as e:
        print(f"[!] Error loading data: {e}")
        sys.exit(1)

    report_dir = make_output_dir(file_path)
    setup_template(report_dir)

    env = Environment(loader=FileSystemLoader(report_dir / "templates"))
    template = env.get_template("report.html")

    html_out = template.render(
        title="Abdal Report",
        table=df.to_html(classes='table table-striped table-hover table-bordered', index=False)
    )

    output_file = report_dir / "report.html"
    with open(output_file, "w", encoding='utf-8') as f:
        f.write(html_out)

    print(f"\n[âœ“] Report successfully generated at:\n    {output_file}\n")

def banner():
    banner = """
 â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆ                                           
â–ˆâ–ˆ   â–ˆâ–ˆ â–ˆâ–ˆ   â–ˆâ–ˆ â–ˆâ–ˆ   â–ˆâ–ˆ â–ˆâ–ˆ   â–ˆâ–ˆ â–ˆâ–ˆ                                           
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆ   â–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ â–ˆâ–ˆ                                           
â–ˆâ–ˆ   â–ˆâ–ˆ â–ˆâ–ˆ   â–ˆâ–ˆ â–ˆâ–ˆ   â–ˆâ–ˆ â–ˆâ–ˆ   â–ˆâ–ˆ â–ˆâ–ˆ                                           
â–ˆâ–ˆ   â–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆ   â–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ                                      
                                                                             
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆ    â–ˆâ–ˆ 
â–ˆâ–ˆ   â–ˆâ–ˆ â–ˆâ–ˆ      â–ˆâ–ˆ   â–ˆâ–ˆ â–ˆâ–ˆ    â–ˆâ–ˆ â–ˆâ–ˆ   â–ˆâ–ˆ    â–ˆâ–ˆ    â–ˆâ–ˆ       â–ˆâ–ˆ      â–ˆâ–ˆâ–ˆâ–ˆ   â–ˆâ–ˆ 
â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆ    â–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ     â–ˆâ–ˆ    â–ˆâ–ˆ   â–ˆâ–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ   â–ˆâ–ˆ â–ˆâ–ˆ  â–ˆâ–ˆ 
â–ˆâ–ˆ   â–ˆâ–ˆ â–ˆâ–ˆ      â–ˆâ–ˆ      â–ˆâ–ˆ    â–ˆâ–ˆ â–ˆâ–ˆ   â–ˆâ–ˆ    â–ˆâ–ˆ    â–ˆâ–ˆ    â–ˆâ–ˆ â–ˆâ–ˆ      â–ˆâ–ˆ  â–ˆâ–ˆ â–ˆâ–ˆ 
â–ˆâ–ˆ   â–ˆâ–ˆ â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ â–ˆâ–ˆ       â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆ   â–ˆâ–ˆ    â–ˆâ–ˆ     â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ  â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ â–ˆâ–ˆ   â–ˆâ–ˆâ–ˆâ–ˆ 

::::: Abdal ReportGen (Multi-format HTML Report Generator) Ver 1.0
::::: Supported formats: CSV, JSON, XML, Excel, SQL (.sql with table named 'data')
::::: Developed by Ebrahim Shafiei (EbraSha)
::::: Contact: Prof.Shafiei@Gmail.com
    """
    print(banner)
# ----------------------------------------------------------
# CLI
# ----------------------------------------------------------
def main():
    parser = argparse.ArgumentParser(
        description="Abdal ReportGen - Multi-format HTML Report Generator by Ebrahim Shafiei (EbraSha)",
        epilog="""
Examples:
  python abdal_reportgen.py -f "C:/data/my file.csv"
  python abdal_reportgen.py

Supported formats: CSV, JSON, XML, Excel, SQL (.sql with table named 'data')
        """,
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument('-f', '--file', help='Path to input data file')
    args = parser.parse_args()

    if args.file:
        file_path = args.file
    else:
        file_path = input("[?] Enter path to your data file: ").strip()
        if file_path.startswith('"') and file_path.endswith('"'):
            file_path = shlex.split(file_path)[0]

    if not os.path.isfile(file_path):
        print(f"[!] File not found: {file_path}")
        sys.exit(1)

    generate_report(file_path)

if __name__ == "__main__":
    banner()
    main()